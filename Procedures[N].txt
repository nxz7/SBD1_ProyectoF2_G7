2. Registrar aeropuerto


CREATE OR REPLACE PROCEDURE RegistrarAeropuerto(
    p_codigo_iata       VARCHAR2,
    p_nombre            VARCHAR2,
    p_direccion         VARCHAR2,
    p_pista_extendida   BOOLEAN,
    p_servicio_aduanero BOOLEAN,
    p_ciudad            VARCHAR2,
    p_pais              VARCHAR2
) IS
    v_id_ciudad   INTEGER;
    v_id_pais     INTEGER;
    v_id_aeropuerto INTEGER;
BEGIN
    -- Verificar si el país existe, si no, insertarlo
    SELECT id_pais INTO v_id_pais
    FROM pais
    WHERE nombre = p_pais;
    
    EXCEPTION WHEN NO_DATA_FOUND THEN
        INSERT INTO pais (id_pais, nombre)
        VALUES (pais_seq.NEXTVAL, p_pais)
        RETURNING id_pais INTO v_id_pais;
    
    -- Verificar si la ciudad existe, si no, insertarla
    SELECT id_ciudad INTO v_id_ciudad
    FROM ciudad
    WHERE nombre = p_ciudad AND pais_id_pais = v_id_pais;
    
    EXCEPTION WHEN NO_DATA_FOUND THEN
        INSERT INTO ciudad (id_ciudad, nombre, pais_id_pais)
        VALUES (ciudad_seq.NEXTVAL, p_ciudad, v_id_pais)
        RETURNING id_ciudad INTO v_id_ciudad;

    -- Insertar el aeropuerto con un id autoincremental
    INSERT INTO aeropuerto (id_aeropuerto, codigo_iata, nombre, direccion, pista_extendida, servicio_aduanero, ciudad_id_ciudad)
    VALUES (aeropuerto_seq.NEXTVAL, p_codigo_iata, p_nombre, p_direccion, p_pista_extendida, p_servicio_aduanero, v_id_ciudad);
    
    COMMIT;
END;





5. Registrar Rutas


CREATE OR REPLACE PROCEDURE RegistrarRuta(
    p_tiempo_vuelo INTEGER,
    p_distancia    INTEGER,
    p_origen       INTEGER,
    p_destino      INTEGER
) IS
    v_id_ruta INTEGER;
BEGIN
    -- Verificar que el aeropuerto de origen existe
    SELECT id_aeropuerto INTO v_origen
    FROM aeropuerto
    WHERE id_aeropuerto = p_origen;
    
    -- Verificar que el aeropuerto de destino existe
    SELECT id_aeropuerto INTO v_destino
    FROM aeropuerto
    WHERE id_aeropuerto = p_destino;

    -- Insertar la nueva ruta
    INSERT INTO ruta (id_ruta, tiempo_de_vuelo, distancia, origen, destino)
    VALUES (ruta_seq.NEXTVAL, p_tiempo_vuelo, p_distancia, p_origen, p_destino);
    
    COMMIT;
END;


8. Registrar Vuelo

CREATE OR REPLACE PROCEDURE RegistrarVuelo(
    p_fecha_salida        DATE,
    p_fecha_llegada       DATE,
    p_estado              VARCHAR2,
    p_avion_id            INTEGER,
    p_ruta_id             INTEGER,
    p_puertaembarque_id   INTEGER,
    p_aerolinea_id        INTEGER,
    p_primeraclase_tarifa NUMBER,
    p_ejecutiva_tarifa    NUMBER,
    p_economica_tarifa    NUMBER
) IS
    v_id_vuelo INTEGER;
BEGIN
    -- Verificar que el avión existe y su estado es 0 (disponible)
    SELECT id_avion INTO v_id_vuelo
    FROM avion
    WHERE id_avion = p_avion_id AND estado = 0;

    -- Verificar que la puerta de embarque existe
    SELECT id_puerta INTO p_puertaembarque_id
    FROM puertaembarque
    WHERE id_puerta = p_puertaembarque_id;

    -- Verificar que la ruta existe
    SELECT id_ruta INTO p_ruta_id
    FROM ruta
    WHERE id_ruta = p_ruta_id;

    -- Verificar que la aerolínea existe
    SELECT id_aerolinea INTO p_aerolinea_id
    FROM aerolinea
    WHERE id_aerolinea = p_aerolinea_id;

    -- Verificar que la fecha de llegada es posterior a la fecha de salida
    IF p_fecha_llegada <= p_fecha_salida THEN
        RAISE_APPLICATION_ERROR(-20001, 'La fecha de llegada debe ser posterior a la de salida');
    END IF;

    -- Insertar vuelo
    INSERT INTO vuelo (id_vuelo, fecha_salida, fecha_llegada, estado, avion_id_avion, ruta_id_ruta, puertaembarque_id_puerta, aerolinea_id_aerolinea)
    VALUES (vuelo_seq.NEXTVAL, p_fecha_salida, p_fecha_llegada, p_estado, p_avion_id, p_ruta_id, p_puertaembarque_id, p_aerolinea_id)
    RETURNING id_vuelo INTO v_id_vuelo;

    -- Insertar tarifas
    INSERT INTO tarifa (id_tarifa, clase, precio, vuelo_id_vuelo)
    VALUES (tarifa_seq.NEXTVAL, 'Primera Clase', p_primeraclase_tarifa, v_id_vuelo);
    
    INSERT INTO tarifa (id_tarifa, clase, precio, vuelo_id_vuelo)
    VALUES (tarifa_seq.NEXTVAL, 'Clase Ejecutiva', p_ejecutiva_tarifa, v_id_vuelo);
    
    INSERT INTO tarifa (id_tarifa, clase, precio, vuelo_id_vuelo)
    VALUES (tarifa_seq.NEXTVAL, 'Clase Económica', p_economica_tarifa, v_id_vuelo);
    
    COMMIT;
END;

11.Aumento de Salario 


CREATE OR REPLACE PROCEDURE AumentoSalario(
    p_empleado_id INTEGER,  
    p_salario     NUMBER    
) IS
    v_cargo_id INTEGER;  
BEGIN
    -- ver que exista
    SELECT cargo_id INTO v_cargo_id
    FROM empleado
    WHERE id_empleado = p_empleado_id;

    -- Update
    UPDATE cargo
    SET salario = p_salario
    WHERE id_cargo = v_cargo_id;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'El empleado no existe');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'ERROR mientras se aumentaba el salario ');
END;

-- REPORTES

2. Consultar Aviones 


CREATE OR REPLACE PROCEDURE ConsultarAviones IS
    CURSOR avion_cursor IS
        SELECT a.modelo, a.matricula, al.nombre AS aerolinea_nombre, a.estado
        FROM avion a
        JOIN aerolinea al ON a.aerolinea_id_aerolinea = al.id_aerolinea;
BEGIN
    -- iterar y mostrar
    FOR avion_rec IN avion_cursor LOOP
        DBMS_OUTPUT.PUT_LINE('Modelo: ' || avion_rec.modelo);
        DBMS_OUTPUT.PUT_LINE('Matrícula: ' || avion_rec.matricula);
        DBMS_OUTPUT.PUT_LINE('Aerolínea: ' || avion_rec.aerolinea_nombre);
        DBMS_OUTPUT.PUT_LINE('Estado: ' || avion_rec.estado);
        DBMS_OUTPUT.PUT_LINE('*************************************');
    END LOOP;
END;


SET SERVEROUTPUT ON;


5. Consultar Cancelaciones 






-- 
BEGIN
   FOR rec IN (SELECT object_name FROM user_objects WHERE object_type = 'PROCEDURE') LOOP
      EXECUTE IMMEDIATE 'DROP PROCEDURE ' || rec.object_name;
   END LOOP;
END;



-- 
BEGIN
   FOR rec IN (SELECT trigger_name FROM user_triggers) LOOP
      EXECUTE IMMEDIATE 'DROP TRIGGER ' || rec.trigger_name;
   END LOOP;
END;


